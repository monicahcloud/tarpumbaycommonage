generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/* ---------- Enums ---------- */

enum CommonerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AppStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum AttachmentKind {
  // Commoner registration
   ID_PASSPORT
  BIRTH_CERT
  PROOF_OF_LINEAGE
  PROOF_OF_ADDRESS
  PROOF_OF_PAYMENT
  OTHER
  // Lot application
  DRAWINGS
  BUSINESS_PLAN

}

enum PublishStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum DocCategory {
  BYLAWS
  POLICY
  FORM
  MEETING_MINUTES
  GUIDE
  OTHER
}

enum DocStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

/* ---------- Core Models ---------- */

model User {
  id           String       @id @default(cuid())
  clerkId      String       @unique
  email        String       @unique
  firstName    String?
  lastName     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  applications Application?
  commoner     CommonerRegistration?
}

model CommonerRegistration {
  id           String          @id @default(cuid())
  userId       String          @unique
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  status       CommonerStatus  @default(PENDING)
  submittedAt  DateTime        @default(now())
  approvedAt   DateTime?

  firstName    String
  lastName     String
  email        String
  phone        String?
  dob          DateTime?
  address      String
  ancestry     String?

  agreeRules   Boolean
  signature    String
  signDate     DateTime?

  // If they already have property
  hasExistingProperty   Boolean  @default(false)
  existingLotNumber     String?
  existingPropertyNotes String?

  // Uploads unified here
  attachments  Attachment[]     @relation("CommonerAttachments")

  // Optional reverse link from Application(s)
  applications Application[]

  @@index([status, submittedAt])
}

model Application {
  id              String       @id @default(cuid())
  userId          String       @unique

  // link back to the CommonerRegistration used to prefill/snapshot
  commonerId      String?
  commoner        CommonerRegistration? @relation(fields: [commonerId], references: [id], onDelete: SetNull)

  firstName       String
  lastName        String
  email           String
  phone           String?
  dob             DateTime?
  address         String?
  ancestry        String?
  purpose         String

  signature       String?
  signDate        DateTime?
  additionalInfo  String?

  // durable flag for path (existing-lot vs new)
  alreadyHasLand  Boolean      @default(false)

  status          AppStatus    @default(DRAFT)
  submittedAt     DateTime?
  updatedAt       DateTime     @updatedAt
  createdAt       DateTime     @default(now())
  adminNote       String?
  feeAmount       Int?
  feePaidAt       DateTime?
  feesPaid        Boolean      @default(false)
  lotNumber       String?
  nextSteps       String?
  rejectionReason String?

  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments     Attachment[] @relation("ApplicationAttachments")   // âœ… keep this one
  statusLogs      StatusLog[]

  @@index([userId])
  @@index([status, createdAt])
  @@index([commonerId])
}


model Attachment {
  id            String       @id @default(cuid())

  // Either attached to a CommonerRegistration or to an Application
  commonerId    String?
  applicationId String?

  kind          AttachmentKind
  url           String
  contentType   String
  size          Int?
  createdAt     DateTime     @default(now())
  label         String?
  pathname      String?

  // Relations with names to avoid ambiguity
  commoner      CommonerRegistration? @relation("CommonerAttachments",   fields: [commonerId],    references: [id], onDelete: Cascade)
  application   Application?          @relation("ApplicationAttachments", fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([commonerId, createdAt])
  @@index([applicationId, createdAt])
}


/* ---------- Status log ---------- */

model StatusLog {
  id            String      @id @default(cuid())
  applicationId String
  changedBy     String
  fromStatus    AppStatus
  toStatus      AppStatus
  note          String?
  createdAt     DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId, createdAt])
}

/* ---------- CMS-ish models you already had ---------- */

model News {
  id        String        @id @default(cuid())
  slug      String        @unique
  title     String
  excerpt   String?
  contentMd String
  status    PublishStatus @default(DRAFT)
  publishAt DateTime?
  createdBy String
  updatedBy String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Announcement {
  id        String        @id @default(cuid())
  title     String
  contentMd String
  status    PublishStatus @default(DRAFT)
  publishAt DateTime?
  createdBy String
  updatedBy String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Faq {
  id         String        @id @default(cuid())
  question   String
  answerMd   String
  category   String?
  orderIndex Int           @default(0)
  status     PublishStatus @default(DRAFT)
  createdBy  String
  updatedBy  String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([category, orderIndex])
}

model Event {
  id            String        @id @default(cuid())
  slug          String        @unique
  title         String
  descriptionMd String?
  status        PublishStatus @default(DRAFT)
  startsAt      DateTime
  endsAt        DateTime
  allDay        Boolean       @default(false)
  location      String?
  isVirtual     Boolean       @default(false)
  zoomJoinUrl   String?
  zoomPasscode  String?
  createdBy     String
  updatedBy     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([status, startsAt])
}

model Document {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String?
  category    DocCategory
  tags        String[]    @default([])
  fileUrl     String
  contentType String?
  size        Int?
  pinned      Boolean     @default(false)
  status      DocStatus   @default(PUBLISHED)
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([status, updatedAt])
  @@index([category])
}
